{"noir_version":"0.31.0+0ea608f10bdeb26df7dfc17b1a0bad5db1967be8","hash":12314066844522112535,"abi":{"parameters":[{"name":"x","type":{"kind":"field"},"visibility":"private"},{"name":"y","type":{"kind":"field"},"visibility":"public"}],"return_type":null,"error_types":{}},"bytecode":"H4sIAAAAAAAA/62QQQqAMAwEW/FBSZO0yc2vWGz//wRBg5TiTQfC5jQsG8NN9JtZPDdP+AaOLoLM3EpqSLhDsqoCLDUrKorKkZSoKWuxagUMmRp2Meoui//1ulzrsEWY/rdtHk7OidP7RQEAAA==","debug_symbols":"NYxbCoAgFET3cr/7SAoCtxIRt9QQ5Co+ghD3nhr9zZkZTgYhj3TtmpQNwNcMxp4YtaVKGcZeBYfUKET0ETibGBtAkuhxKQMobSTweSlbhRu9xsPIJmhbovP3VYyP+5b6fQE=","file_map":{"47":{"source":"use dep::bignum::ArrayX;\nuse dep::bignum::BigNum;\nuse dep::bignum::BNExpressionInput;\nuse dep::bignum::BigNumParamsTrait;\nuse dep::bignum::U60Repr;\n\nmod scalar_field;\nmod curve_jac;\n\nuse crate::curve_jac::CurveJ;\nuse crate::scalar_field::ScalarField;\n\nstruct BNParams {}\nimpl BigNumParamsTrait<3> for BNParams {\n    fn redc_param() -> [Field; 3] {\n        [\n            0x000000000000000000000000000000000059785d9f353021bcebb62866fe4394, 0x0000000000000000000000000000000000d18988e8129eac1d2961a01cc04eba, 0x0000000000000000000000000000000000000000000000000000000000015291\n        ]\n    }\n    fn modulus() -> [Field; 3] {\n        [\n            0x0000000000000000000000000000000000816a916871ca8d3c208c16d87cfd47, 0x00000000000000000000000000000000004e72e131a029b85045b68181585d97, 0x0000000000000000000000000000000000000000000000000000000000003064\n        ]\n    }\n    fn double_modulus() -> [Field; 3] {\n        [\n            0x000000000000000000000000000000000002d522d0e3951a7841182db0f9fa8e, 0x00000000000000000000000000000000009ce5c263405370a08b6d0302b0bb2f, 0x00000000000000000000000000000000000000000000000000000000000060c8\n        ]\n    }\n    fn k() -> u64 {\n        255\n    }\n    fn modulus_bits() -> u64 {\n        254\n    }\n}\n\ntype Fq = BigNum<3, BNParams>;\n\nfn main(x: Field, y: pub Field) {\n    assert(x == y);\n}\n\nunconstrained fn foo(P: CurveJ<3, BNParams>, scalar: ScalarField<10>) -> CurveJ<3, BNParams> {\n    P.mul(scalar).0\n}\n#[test]\nfn test_foo() {\n    let two = BigNum::one().__addmod(BigNum::one());\n    let P: CurveJ<3, BNParams> = CurveJ { x: BigNum::one(), y: two, z: BigNum::one() };\n\n    let scalar: ScalarField<10> = ScalarField::from(2);\n\n    let result = foo(P, scalar);\n    let expected = P.dbl().0;\n    assert(result.x == expected.x);\n}\n","path":"/mnt/user-data/zac/noir_bigcurve/src/main.nr"}},"names":["main"]}